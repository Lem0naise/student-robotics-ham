#!/usr/bin/env python3
"""
A script for use by the SR IDE to create an archive containing the Simulator
world and the user's robot code.
"""

import argparse
import subprocess
from typing import Callable
from pathlib import Path
from zipfile import ZipFile


def git(*command: str) -> str:
    return subprocess.check_output(
        ['git', *command],
        cwd=str(Path(__file__).parent.parent),
    ).decode()


def add_to_archive(
    archive: ZipFile,
    path: Path,
    arcname_conversion: Callable[[Path], str],
) -> None:
    if path.is_dir():
        for entry in path.iterdir():
            add_to_archive(archive, entry, arcname_conversion)
    else:
        archive.write(path, arcname=arcname_conversion(path))


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument('TLA', help="Unused, present for compatibility")
    parser.add_argument(
        'user_code_directory',
        help="The directory containing the user's robot code",
        type=Path,
    )
    parser.add_argument(
        'output_archive',
        help="The path to the desired archive to create",
        type=Path,
    )
    return parser.parse_args()


def main(args: argparse.Namespace) -> None:
    git(
        'archive',
        'HEAD',
        '--prefix',
        'competition-simulator/',
        '--output',
        str(args.output_archive.resolve()),
    )

    version = git('rev-parse', 'HEAD').strip()
    description = git('describe', '--always', '--tags').strip()

    with ZipFile(args.output_archive, mode='a') as zipfile:
        # Add in the version of the simulation
        zipfile.writestr(
            'competition-simulator/.simulation-rev',
            # Updating this? Also update the equivalent in create-archive.
            "{}\n{}\n".format(description, version),
        )

        # Write in the user code
        add_to_archive(
            zipfile,
            args.user_code_directory,
            lambda p: str(p.relative_to(args.user_code_directory)),
        )


if __name__ == '__main__':
    main(parse_args())
